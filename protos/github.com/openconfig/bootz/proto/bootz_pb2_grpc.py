# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from github.com.openconfig.bootz.proto import bootz_pb2 as github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in github.com/openconfig/bootz/proto/bootz_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BootstrapStub(object):
    """The Bootz service definition.
    Bootz service is hosted by the bootz-server, and the device is the
    client (as opposed to most g*i services, which are hosted by the device).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBootstrapData = channel.unary_unary(
                '/bootz.Bootstrap/GetBootstrapData',
                request_serializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.GetBootstrapDataRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.GetBootstrapDataResponse.FromString,
                _registered_method=True)
        self.ReportStatus = channel.unary_unary(
                '/bootz.Bootstrap/ReportStatus',
                request_serializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.ReportStatusRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.EmptyResponse.FromString,
                _registered_method=True)


class BootstrapServicer(object):
    """The Bootz service definition.
    Bootz service is hosted by the bootz-server, and the device is the
    client (as opposed to most g*i services, which are hosted by the device).
    """

    def GetBootstrapData(self, request, context):
        """This RPC returns the data required to put the device in a known state
        (i.e. OS, bootloader password, etc) and applies an initial device
        configuration.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportStatus(self, request, context):
        """This RPC is used by the device to indicate successful application of
        BootstrappingData. The Bootz system will proceed to the next step if
        a SUCCESS is reported, otherwise it will retry or put the device in an
        out-of-service state. The device should validate the server's identity
        against the server_trust_cert it obtained in GetBootstrappingDataResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BootstrapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBootstrapData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBootstrapData,
                    request_deserializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.GetBootstrapDataRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.GetBootstrapDataResponse.SerializeToString,
            ),
            'ReportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportStatus,
                    request_deserializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.ReportStatusRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bootz.Bootstrap', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('bootz.Bootstrap', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Bootstrap(object):
    """The Bootz service definition.
    Bootz service is hosted by the bootz-server, and the device is the
    client (as opposed to most g*i services, which are hosted by the device).
    """

    @staticmethod
    def GetBootstrapData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bootz.Bootstrap/GetBootstrapData',
            github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.GetBootstrapDataRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.GetBootstrapDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bootz.Bootstrap/ReportStatus',
            github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.ReportStatusRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_bootz_dot_proto_dot_bootz__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
