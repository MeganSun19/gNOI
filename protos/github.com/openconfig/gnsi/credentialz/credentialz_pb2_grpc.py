# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from github.com.openconfig.gnsi.credentialz import credentialz_pb2 as github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in github.com/openconfig/gnsi/credentialz/credentialz_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CredentialzStub(object):
    """The Credentials Management Service exported by targets.

    This service exports two RPCs, RotateAccountCredentials() and
    RotateHostParameters(), which are used to manage the account-related SSH
    credentials, and the host-related SSH credentials on a target respectively.

    Note that for the sake of data consistency and API simplicity, only one RPC
    may be in progress at a time. An attempt to initiate any of the RPCs while
    another one is already in progress will be rejected with an error.
    For example, when the RotateAccountCredentials() RPC is in progress another
    call to the RotateAccountCredentials() or the RotateHostParameters() RPC
    will be rejected.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RotateAccountCredentials = channel.stream_stream(
                '/gnsi.credentialz.v1.Credentialz/RotateAccountCredentials',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateAccountCredentialsRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateAccountCredentialsResponse.FromString,
                _registered_method=True)
        self.RotateHostParameters = channel.stream_stream(
                '/gnsi.credentialz.v1.Credentialz/RotateHostParameters',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateHostParametersRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateHostParametersResponse.FromString,
                _registered_method=True)
        self.CanGenerateKey = channel.unary_unary(
                '/gnsi.credentialz.v1.Credentialz/CanGenerateKey',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.CanGenerateKeyRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.CanGenerateKeyResponse.FromString,
                _registered_method=True)
        self.GetPublicKeys = channel.unary_unary(
                '/gnsi.credentialz.v1.Credentialz/GetPublicKeys',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.GetPublicKeysRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.GetPublicKeysResponse.FromString,
                _registered_method=True)


class CredentialzServicer(object):
    """The Credentials Management Service exported by targets.

    This service exports two RPCs, RotateAccountCredentials() and
    RotateHostParameters(), which are used to manage the account-related SSH
    credentials, and the host-related SSH credentials on a target respectively.

    Note that for the sake of data consistency and API simplicity, only one RPC
    may be in progress at a time. An attempt to initiate any of the RPCs while
    another one is already in progress will be rejected with an error.
    For example, when the RotateAccountCredentials() RPC is in progress another
    call to the RotateAccountCredentials() or the RotateHostParameters() RPC
    will be rejected.

    """

    def RotateAccountCredentials(self, request_iterator, context):
        """RotateAccountCredentials allows to specify an authentication SSH service
        policy to the network element. The policy, if valid, replaces the existing
        policy.

        Canonical error codes are to be used as responses. See
        https://grpc.io/docs/guides/error/ for more details.

        Allows for setting the SSH authorized keys list for a system account
        (i.e. the set of SSH keys that are allows to login to the account).
        Also allows to set the SSH authorized principals list for a system account
        (i.e. the set of SSH certificate principals accepted for login to the
        account).

        Moreover, it allows to change the system account's password.

        Case 1: Both the credentials and authorized usernames are set.

        Step 1: Start the stream
        Client <---- RotateAccountCredentials() RPC stream begin ------> Target

        Step 2: Credentials are replaced
        Client -----> AuthorizedKeysRequest----> Target
        Client <----- AuthorizedKeysResponse <--- Target

        Step 3: Authorized username lists are replaced
        Client -----> AuthorizedUsersRequest----> Target
        Client <----- AuthorizedUsersResponse <--- Target

        Step 4 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new certificates/keys and validates that
        the certificates/keys "work".
        Once verified, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the certificates/keys.

        Step 5: Final commit.
        Client -----> FinalizeRequest----> Target


        Case 2: Only the credentials are updated.

        Step 1: Start the stream
        Client <---- RotateAccountCredentials() RPC stream begin ------> Target

        Step 2: Credentials are replaced
        Client -----> AuthorizedKeysRequest----> Target
        Client <----- AuthorizedKeysResponse <--- Target

        Step 3 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new certificates/keys and validates that
        the certificates/keys "work".
        Once verified, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the certificates/keys.

        Step 4: Final commit.
        Client -----> FinalizeRequest----> Target


        Case 3: Only authorized usernames are updated.

        Step 1: Start the stream
        Client <---- RotateAccountCredentials() RPC stream begin ------> Target

        Step 2: New authorized username lists are replaced
        Client -----> AuthorizedUsersRequest----> Target
        Client <----- AuthorizedUsersResponse <--- Target

        Step 3 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new certificates/keys and validates that
        the certificates/keys "work".
        Once verified, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the certificates/keys.

        Step 4: Final commit.
        Client -----> FinalizeRequest----> Target


        Case 4: Passwords are updated.

        Step 1: Start the stream
        Client <---- RotateAccountCredentials() RPC stream begin ------> Target

        Step 2: Account passwords are replaced
        Client -----> PasswordRequest----> Target
        Client <----- PasswordResponse <--- Target

        Step 3 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new passwords and validates that they "work".
        Once verified, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the passwords.

        Step 4: Final commit.
        Client -----> FinalizeRequest----> Target

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RotateHostParameters(self, request_iterator, context):
        """RotateHostParameters() allows for changing both the Certificate Authority
        public key as well as the keys and the certificate used by the SSH server.
        The CA public key key is used to verify certificates presented by
        the client to the SSH server during connection establishment.
        The server's public and private keys are required during regular operations
        of the SSH server.
        The SSH server's certificate is used by the client to authenticate
        the server during connection establishemnt process. This certificate might
        be signed by the same Certificate Authority that has signed clients'
        certificates.

        Use Case 1: Update the CA public key.

        Step 1: Start the stream
        Client <---- RotateHostParameters() RPC stream begin ------> Target

        Step 2: Replace the CA public key
        Client -----> CaPublicKeyRequest----> Target
        Client <----- CaPublicKeyResponse <--- Target

        Step 3 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new certificates/keys and validates that
        the certificates/keys "work".
        Once verfied, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the certificates/keys.

        Step 4: Final commit.
        Client -----> FinalizeRequest----> Target

        Use Case 2: Update the server's keys and cert.

        Step 1: Start the stream
        Client <---- RotateHostParameters() RPC stream begin ------> Target

        Step 2: Replace all server keys
        Client -----> ServerKeysRequest----> Target
        Client <----- ServerKeysResponse <--- Target

        Step 3 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new certificates/keys and validates that
        the certificates/keys "work".
        Once verfied, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the certificates/keys.

        Step 4: Final commit.
        Client -----> FinalizeRequest----> Target

        Use Case 3: Replace keys by generating on the device

        Step 1: Start the stream
        Client <---- RotateHostParameters() RPC stream begin ------> Target

        Step 2: Trigger key generation on the device and apply host key. The
        device returns the public keys corresponding to the generated
        private keys which will be used to create host certificates.
        Client -----> GenerateKeysRequest ----> Target
        Client <----  GenerateKeysResponse <----- Target

        Step 3: Replace all server keys (certificates)
        Client -----> ServerKeysRequest----> Target
        Client <----- ServerKeysResponse <--- Target

        Step 4 (optional): Test/Validation by the client.
        During this step client attempts to create a new connection to
        the target using the new certificates/keys and validates that
        the certificates/keys "work".
        Once verfied, the client then proceeds to finalize the rotation.
        If the new connection cannot be completed the client will cancel the
        RPC thereby forcing the target to rollback all the certificates/keys.

        Step 5: Final commit.
        Client -----> FinalizeRequest----> Target
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanGenerateKey(self, request, context):
        """An RPC to ask a target if it can generate a Public/Private key pair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPublicKeys(self, request, context):
        """Get the current public keys from the host. Each configured key will be
        returned in the provided list.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CredentialzServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RotateAccountCredentials': grpc.stream_stream_rpc_method_handler(
                    servicer.RotateAccountCredentials,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateAccountCredentialsRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateAccountCredentialsResponse.SerializeToString,
            ),
            'RotateHostParameters': grpc.stream_stream_rpc_method_handler(
                    servicer.RotateHostParameters,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateHostParametersRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateHostParametersResponse.SerializeToString,
            ),
            'CanGenerateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CanGenerateKey,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.CanGenerateKeyRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.CanGenerateKeyResponse.SerializeToString,
            ),
            'GetPublicKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublicKeys,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.GetPublicKeysRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.GetPublicKeysResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnsi.credentialz.v1.Credentialz', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gnsi.credentialz.v1.Credentialz', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Credentialz(object):
    """The Credentials Management Service exported by targets.

    This service exports two RPCs, RotateAccountCredentials() and
    RotateHostParameters(), which are used to manage the account-related SSH
    credentials, and the host-related SSH credentials on a target respectively.

    Note that for the sake of data consistency and API simplicity, only one RPC
    may be in progress at a time. An attempt to initiate any of the RPCs while
    another one is already in progress will be rejected with an error.
    For example, when the RotateAccountCredentials() RPC is in progress another
    call to the RotateAccountCredentials() or the RotateHostParameters() RPC
    will be rejected.

    """

    @staticmethod
    def RotateAccountCredentials(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/gnsi.credentialz.v1.Credentialz/RotateAccountCredentials',
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateAccountCredentialsRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateAccountCredentialsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RotateHostParameters(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/gnsi.credentialz.v1.Credentialz/RotateHostParameters',
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateHostParametersRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.RotateHostParametersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CanGenerateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gnsi.credentialz.v1.Credentialz/CanGenerateKey',
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.CanGenerateKeyRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.CanGenerateKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPublicKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gnsi.credentialz.v1.Credentialz/GetPublicKeys',
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.GetPublicKeysRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_credentialz_dot_credentialz__pb2.GetPublicKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
