# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from github.com.openconfig.gnsi.pathz import pathz_pb2 as github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in github.com/openconfig/gnsi/pathz/pathz_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PathzStub(object):
    """The OpenConfig gNMI Path-based Authorization Policy Management Service
    exported by targets.


    The OpenConfig Path-based Authorization Policy defines which principals
    are permitted to access which OpenConfig path.

    The service allows for change/update of the OpenConfig Path-based
    Authorization Policy using the Rotate() RPC.
    There can be only one OpenConfig Path-based Authorization Policy installed on
    a target.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Rotate = channel.stream_stream(
                '/gnsi.pathz.v1.Pathz/Rotate',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.RotateRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.RotateResponse.FromString,
                _registered_method=True)
        self.Probe = channel.unary_unary(
                '/gnsi.pathz.v1.Pathz/Probe',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.ProbeRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.ProbeResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/gnsi.pathz.v1.Pathz/Get',
                request_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.GetRequest.SerializeToString,
                response_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.GetResponse.FromString,
                _registered_method=True)


class PathzServicer(object):
    """The OpenConfig gNMI Path-based Authorization Policy Management Service
    exported by targets.


    The OpenConfig Path-based Authorization Policy defines which principals
    are permitted to access which OpenConfig path.

    The service allows for change/update of the OpenConfig Path-based
    Authorization Policy using the Rotate() RPC.
    There can be only one OpenConfig Path-based Authorization Policy installed on
    a target.

    """

    def Rotate(self, request_iterator, context):
        """Rotate will replace an existing OpenConfig gNMI Path-based Authorization
        Policy on the target.
        If the stream is broken or any of the steps fail the target must rollback
        to the original state, i.e. revert any changes to the OpenConfig gNMI
        Path-based Authorization Policy made during this RPC.

        Note that only one such RPC can be in progress. An attempt to call this
        RPC while another is already in progress will be rejected with the
        `UNAVAILABLE` gRPC error.

        The following describes the sequence of messages that must be exchanged
        in the Rotate() RPC.

        Sequence of expected messages:
        Step 1: Start the stream
        Client ----> Rotate() RPC stream begin ------> Target

        Step 2: Send OpenConfig gNMI Path-based Authorization Policy to Target.
        Client --> UploadRequest(pathz_policy) ----> Target
        Client <-- UploadResponse <--- Target

        Step 3 (optional): Test/Validation by the client.
        During this step client calls (possibly multiple times)
        the Probe(POLICY_INSTANCE_SANDBOX) RPC to check that a combination of
        user ID, gNMI path and operation mode that is supposed to be allowed by
        the new policy and validates that the response is ACTION_PERMIT.
        Additionally the client should call the Probe(POLICY_INSTANCE_SANDBOX)
        RPC with a combination of user ID, gNMI path and operation mode that is
        not allowed in the new policy and the attempt must result in
        the ACTION_DENY response proving that the new policy "works".
        Once verified, the client then proceeds to finalize the rotation.
        If the verification did not succeed the client will cancel the Rotate
        RPC thereby forcing the target to perform a rollback of the new
        OpenConfig gNMI Path-based Authorization Policy to the previous one.

        Step 4: Final commit.
        Client ---> FinalizeRequest ----> Target

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Probe(self, request, context):
        """Probe allows for evaluation of the pathz policy engine response to a gNMI
        operation performed by a user on a single gNMI path.
        The response is based on the instance of policy specified in the request
        and is evaluated without actually performing the gNMI operation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get returns specified instance of the OpenConfig gNMI Path-based
        Authorization Policy together with its version and created-on information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PathzServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Rotate': grpc.stream_stream_rpc_method_handler(
                    servicer.Rotate,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.RotateRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.RotateResponse.SerializeToString,
            ),
            'Probe': grpc.unary_unary_rpc_method_handler(
                    servicer.Probe,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.ProbeRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.ProbeResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.GetRequest.FromString,
                    response_serializer=github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.GetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnsi.pathz.v1.Pathz', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gnsi.pathz.v1.Pathz', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Pathz(object):
    """The OpenConfig gNMI Path-based Authorization Policy Management Service
    exported by targets.


    The OpenConfig Path-based Authorization Policy defines which principals
    are permitted to access which OpenConfig path.

    The service allows for change/update of the OpenConfig Path-based
    Authorization Policy using the Rotate() RPC.
    There can be only one OpenConfig Path-based Authorization Policy installed on
    a target.

    """

    @staticmethod
    def Rotate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/gnsi.pathz.v1.Pathz/Rotate',
            github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.RotateRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.RotateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Probe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gnsi.pathz.v1.Pathz/Probe',
            github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.ProbeRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.ProbeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gnsi.pathz.v1.Pathz/Get',
            github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.GetRequest.SerializeToString,
            github_dot_com_dot_openconfig_dot_gnsi_dot_pathz_dot_pathz__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
